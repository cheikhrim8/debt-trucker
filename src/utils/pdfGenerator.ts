import jsPDF from 'jspdf';
import { Person, Transaction } from '../types';

export const generateBalanceSheet = async (person: Person, transactions: Transaction[]): Promise<Blob> => {
  const pdf = new jsPDF();
  
  // Set font
  pdf.setFont('helvetica');
  
  // Header
  pdf.setFontSize(20);
  pdf.setTextColor(79, 70, 229); // Indigo color
  pdf.text('Debty - Balance Sheet', 20, 30);
  
  // Person info
  pdf.setFontSize(16);
  pdf.setTextColor(0, 0, 0);
  pdf.text(`Account: ${person.name}`, 20, 50);
  pdf.setFontSize(12);
  pdf.text(`Phone: ${person.phone}`, 20, 60);
  pdf.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 70);
  
  // Current balance
  pdf.setFontSize(14);
  pdf.setTextColor(person.balance < 0 ? 34, 197, 94 : person.balance > 0 ? 239, 68, 68 : 107, 114, 128);
  const balanceText = person.balance < 0 
    ? `They owe you: ${Math.abs(person.balance).toFixed(2)} MRU`
    : person.balance > 0 
    ? `You owe them: ${person.balance.toFixed(2)} MRU`
    : 'All settled: 0.00 MRU';
  pdf.text(balanceText, 20, 85);
  
  // Transaction history header
  pdf.setFontSize(16);
  pdf.setTextColor(0, 0, 0);
  pdf.text('Transaction History', 20, 105);
  
  // Table headers
  pdf.setFontSize(10);
  pdf.setTextColor(107, 114, 128);
  pdf.text('Date', 20, 120);
  pdf.text('Type', 60, 120);
  pdf.text('Amount (MRU)', 100, 120);
  pdf.text('Status', 150, 120);
  
  // Draw line under headers
  pdf.setDrawColor(229, 231, 235);
  pdf.line(20, 125, 190, 125);
  
  // Transaction rows
  let yPosition = 135;
  const sortedTransactions = transactions.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
  
  sortedTransactions.forEach((transaction, index) => {
    if (yPosition > 270) { // Start new page if needed
      pdf.addPage();
      yPosition = 30;
    }
    
    pdf.setFontSize(9);
    pdf.setTextColor(0, 0, 0);
    
    // Date
    pdf.text(new Date(transaction.date).toLocaleDateString(), 20, yPosition);
    
    // Type with color
    pdf.setTextColor(transaction.type === 'credit' ? 239, 68, 68 : 34, 197, 94);
    pdf.text(transaction.type === 'credit' ? 'I Owe' : 'They Owe', 60, yPosition);
    
    // Amount
    pdf.setTextColor(0, 0, 0);
    pdf.text(`${transaction.amount.toFixed(2)}`, 100, yPosition);
    
    // Status
    pdf.setTextColor(
      transaction.status === 'paid' ? 34, 197, 94 :
      transaction.status === 'partial' ? 245, 158, 11 :
      107, 114, 128
    );
    pdf.text(transaction.status.charAt(0).toUpperCase() + transaction.status.slice(1), 150, yPosition);
    
    // Note if exists
    if (transaction.note) {
      yPosition += 8;
      pdf.setFontSize(8);
      pdf.setTextColor(107, 114, 128);
      pdf.text(`Note: ${transaction.note}`, 25, yPosition);
    }
    
    yPosition += 12;
  });
  
  // Summary at the bottom
  if (yPosition > 250) {
    pdf.addPage();
    yPosition = 30;
  }
  
  yPosition += 20;
  pdf.setDrawColor(229, 231, 235);
  pdf.line(20, yPosition, 190, yPosition);
  
  yPosition += 15;
  pdf.setFontSize(12);
  pdf.setTextColor(0, 0, 0);
  pdf.text('Summary:', 20, yPosition);
  
  yPosition += 10;
  pdf.setFontSize(10);
  const totalCredit = transactions.filter(t => t.type === 'credit').reduce((sum, t) => sum + t.amount, 0);
  const totalDebit = transactions.filter(t => t.type === 'debit').reduce((sum, t) => sum + t.amount, 0);
  
  pdf.text(`Total Credit (I Owe): ${totalCredit.toFixed(2)} MRU`, 20, yPosition);
  yPosition += 8;
  pdf.text(`Total Debit (They Owe): ${totalDebit.toFixed(2)} MRU`, 20, yPosition);
  yPosition += 8;
  pdf.setFontSize(11);
  pdf.setTextColor(person.balance < 0 ? 34, 197, 94 : person.balance > 0 ? 239, 68, 68 : 107, 114, 128);
  pdf.text(`Current Balance: ${balanceText}`, 20, yPosition);
  
  // Footer
  pdf.setFontSize(8);
  pdf.setTextColor(107, 114, 128);
  pdf.text('Generated by Debty - Personal Debt Tracker', 20, pdf.internal.pageSize.height - 10);
  
  return pdf.output('blob');
};